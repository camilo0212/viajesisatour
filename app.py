# -*- coding: utf-8 -*-
"""Aplicación Principal (Mejorada)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VPdCyEy6lg5h5z-msAEMrtnDWpIECkU9
"""

import streamlit as st
import config
from datetime import datetime
import plotly.graph_objects as go

# --- CONFIGURACIÓN DE LA PÁGINA ---
st.set_page_config(
    page_title="Base de Datos Viajes Isatour",
    page_icon="https://i.ibb.co/9v0Zz7N/ISATOUR-400-x-400-px-1.png",
    layout="wide",
)

# --- INICIALIZACIÓN Y AUTENTICACIÓN ---
try:
    db = config.init_firebase()
except Exception as e:
    st.error(f"Error CRÍTICO al inicializar Firebase. Asegúrate de que tu archivo 'secrets.toml' está bien configurado en Streamlit. El error es: {e}")
    st.stop()

# --- ESTADO DE LA SESIÓN ---
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'active_excursion_id' not in st.session_state:
    st.session_state.active_excursion_id = None
if 'excursiones_cache' not in st.session_state:
    st.session_state.excursiones_cache = []

# --- FUNCIONES AUXILIARES ---
def format_currency(value):
    return f"${value:,.0f}"

# --- VISTA DE LOGIN ---
if not st.session_state.authenticated:
    st.image("https://i.ibb.co/9v0Zz7N/ISATOUR-400-x-400-px-1.png", width=100)
    st.title("Bienvenido a Isatour")
    st.write("Ingresa las credenciales para acceder.")

    user = st.text_input("Usuario")
    password = st.text_input("Contraseña", type="password")

    app_user = st.secrets.get("APP_USER", "isatour")
    app_password = st.secrets.get("APP_PASSWORD", "isatour1979*")

    if st.button("Iniciar Sesión"):
        if user.lower() == app_user and password == app_password:
            st.session_state.authenticated = True
            st.rerun()
        else:
            st.error("Usuario o contraseña incorrectos.")
    st.stop()

# --- VISTA PRINCIPAL DE LA APP ---
st.sidebar.image("https://i.ibb.co/9v0Zz7N/ISATOUR-400-x-400-px-1.png", width=70)
st.sidebar.title("Viajes Isatour")
selected_tab = st.sidebar.radio("Navegación", ["Gestionar Excursiones", "Clientes y Abonos", "Costos y Proveedores", "Análisis Financiero"])

# --- LÓGICA DE DATOS ---
try:
    excursiones_ref = db.collection("excursiones")
    excursiones_docs = excursiones_ref.order_by("createdAt", direction="DESCENDING").stream()
    st.session_state.excursiones_cache = [{"id": doc.id, **doc.to_dict()} for doc in excursiones_docs]
except Exception as e:
    st.error(f"Error al cargar las excursiones desde Firestore. ¿Es posible que aún no hayas creado la colección 'excursiones'? Error: {e}")
    st.session_state.excursiones_cache = []


# --- PESTAÑA: GESTIONAR EXCURSIONES ---
if selected_tab == "Gestionar Excursiones":
    st.header("Gestionar Excursiones")

    col1, col2 = st.columns([1, 2])

    with col1:
        with st.container(border=True):
            st.subheader("Nueva Excursión")
            with st.form("add_excursion_form", clear_on_submit=True):
                name = st.text_input("Nombre del Viaje", placeholder="Ej: Viaje a Guatapé")
                description = st.text_area("Descripción / Itinerario", height=200)
                cost = st.number_input("Valor por Persona", min_value=0, step=1000)

                submitted = st.form_submit_button("Crear Excursión", use_container_width=True, type="primary")
                if submitted and name and cost > 0:
                    excursiones_ref.add({
                        "name": name,
                        "description": description,
                        "costPerPerson": cost,
                        "createdAt": datetime.now()
                    })
                    st.success(f"¡Excursión '{name}' creada!")
                    st.rerun()

    with col2:
        st.subheader("Excursiones Activas")
        if not st.session_state.excursiones_cache:
            st.info("No hay excursiones creadas. ¡Añade una para empezar!")

        for ex in st.session_state.excursiones_cache:
            with st.expander(f"{ex.get('name', 'Excursión sin nombre')} - {format_currency(ex.get('costPerPerson', 0))}"):
                st.write(ex.get('description', 'Sin descripción.'))

                if st.button("Eliminar Excursión", key=f"delete_{ex['id']}", use_container_width=True, type="secondary"):
                    excursiones_ref.document(ex['id']).delete()
                    st.rerun()

# --- LÓGICA COMÚN PARA OTRAS PESTAÑAS ---
def render_management_tab(tab_name, collection_name, form_fields, item_renderer):
    st.header(f"{tab_name}")

    if not st.session_state.excursiones_cache:
        st.warning("Primero debes crear una excursión en la pestaña 'Gestionar Excursiones'.")
        st.stop()

    excursion_options = {ex.get('name', f"ID: {ex['id']}"): ex['id'] for ex in st.session_state.excursiones_cache}
    selected_excursion_name = st.selectbox("Selecciona una excursión:", options=excursion_options.keys())

    if selected_excursion_name:
        st.session_state.active_excursion_id = excursion_options[selected_excursion_name]

        col1, col2 = st.columns([1, 2])
        with col1:
            with st.container(border=True):
                st.subheader(f"Añadir Nuevo {collection_name.rstrip('es')}")
                with st.form(f"add_{collection_name}_form", clear_on_submit=True):
                    form_data = {}
                    for field_label, field_type, kwargs in form_fields:
                        if field_type == "text_input":
                            form_data[kwargs['key']] = st.text_input(field_label, **kwargs)
                        elif field_type == "number_input":
                            form_data[kwargs['key']] = st.number_input(field_label, **kwargs)
                        elif field_type == "selectbox":
                             form_data[kwargs['key']] = st.selectbox(field_label, **kwargs)

                    if st.form_submit_button(f"Añadir {collection_name.rstrip('es')}", use_container_width=True):
                        form_data["createdAt"] = datetime.now()
                        excursiones_ref.document(st.session_state.active_excursion_id).collection(collection_name).add(form_data)
                        st.success("¡Añadido con éxito!")
                        st.rerun()

        with col2:
            items_ref = excursiones_ref.document(st.session_state.active_excursion_id).collection(collection_name)
            items_docs = items_ref.order_by("createdAt", direction="DESCENDING").stream()
            items = [{"id": doc.id, **doc.to_dict()} for doc in items_docs]

            if not items:
                st.info(f"No hay {collection_name} registrados para esta excursión.")

            for item in items:
                item_renderer(item, items_ref)

# --- RENDERIZADO DE CLIENTES ---
def render_cliente(cliente, clientes_ref):
    excursion = next((ex for ex in st.session_state.excursiones_cache if ex["id"] == st.session_state.active_excursion_id), None)
    if not excursion: return

    costo_total = excursion.get('costPerPerson', 0)

    abonos_ref = clientes_ref.document(cliente['id']).collection("abonos")
    abonos_docs = abonos_ref.stream()
    abonos = [{"id": doc.id, **doc.to_dict()} for doc in abonos_docs]
    total_abonado = sum(abono.get('monto', 0) for abono in abonos)
    restante = costo_total - total_abonado
    porcentaje_pagado = (total_abonado / costo_total * 100) if costo_total > 0 else 100

    with st.container(border=True):
        c1, c2 = st.columns([3,1])
        c1.subheader(cliente.get('name', 'Sin Nombre'))
        if restante <= 0:
            c2.success("¡Pagado!")
        else:
            c2.warning(f"Resta: {format_currency(restante)}")

# El valor para la BARRA se limita a 100, pero el TEXTO muestra el porcentaje real.
progress_value = min(100, int(porcentaje_pagado))
# El valor para la BARRA se limita a 100, pero el TEXTO muestra el porcentaje real.
progress_value = min(100, int(porcentaje_pagado))
st.progress(progress_value, text=f"{int(porcentaje_pagado)}% Pagado ({format_currency(total_abonado)} de {format_currency(valor_total)})")
        with st.expander("Gestionar Abonos y Acciones"):
            st.write("**Historial de Abonos:**")
            if not abonos:
                st.write("No hay abonos registrados.")
            for abono in sorted(abonos, key=lambda x: x.get('fecha', datetime.min), reverse=True):
                 ac1, ac2, ac3 = st.columns([2,2,1])
                 ac1.write(f"- {format_currency(abono.get('monto',0))}")
                 fecha = abono.get('fecha')
                 ac2.write(fecha.strftime("%d/%m/%Y") if fecha and hasattr(fecha, 'strftime') else "Sin fecha")
                 if ac3.button("Eliminar", key=f"del_abono_{abono['id']}", type="secondary"):
                     abonos_ref.document(abono['id']).delete()
                     st.rerun()

            st.divider()
            st.write("**Nuevo Abono:**")
            with st.form(f"abono_form_{cliente['id']}", clear_on_submit=True):
                monto = st.number_input("Monto del abono", min_value=0, step=1000)
                if st.form_submit_button("Añadir Abono", use_container_width=True):
                    abonos_ref.add({"monto": monto, "fecha": datetime.now()})
                    st.rerun()

            st.divider()
            if st.button("Eliminar Cliente", key=f"del_cliente_{cliente['id']}", use_container_width=True, type="primary"):
                for abono in abonos:
                    abonos_ref.document(abono['id']).delete()
                clientes_ref.document(cliente['id']).delete()
                st.rerun()

# --- RENDERIZADO DE PROVEEDORES ---
def render_proveedor(proveedor, proveedores_ref):
    valor_total = proveedor.get('valorTotal', 0)

    abonos_ref = proveedores_ref.document(proveedor['id']).collection("abonos")
    abonos_docs = abonos_ref.stream()
    abonos = [{"id": doc.id, **doc.to_dict()} for doc in abonos_docs]
    total_abonado = sum(abono.get('monto', 0) for abono in abonos)
    restante = valor_total - total_abonado
    porcentaje_pagado = (total_abonado / valor_total * 100) if valor_total > 0 else 100

    with st.container(border=True):
        c1, c2, c3 = st.columns([2, 1, 1])
        c1.subheader(proveedor.get('nombre', 'Sin Nombre'))
        c2.info(proveedor.get('categoria', 'Sin Categoría'))
        if restante <= 0:
            c3.success("¡Pagado!")
        else:
            c3.warning(f"Resta: {format_currency(restante)}")

        st.progress(int(porcentaje_pagado), text=f"{int(porcentaje_pagado)}% Pagado ({format_currency(total_abonado)} de {format_currency(valor_total)})")

        with st.expander("Gestionar Pagos"):
            st.write("**Historial de Pagos:**")
            if not abonos:
                st.write("No hay pagos registrados.")
            for abono in sorted(abonos, key=lambda x: x.get('fecha', datetime.min), reverse=True):
                 ac1, ac2, ac3 = st.columns([2,2,1])
                 ac1.write(f"- {format_currency(abono.get('monto',0))}")
                 fecha = abono.get('fecha')
                 ac2.write(fecha.strftime("%d/%m/%Y") if fecha and hasattr(fecha, 'strftime') else "Sin fecha")
                 if ac3.button("Eliminar", key=f"del_abono_prov_{abono['id']}", type="secondary"):
                     abonos_ref.document(abono['id']).delete()
                     st.rerun()

            st.divider()
            st.write("**Nuevo Pago:**")
            with st.form(f"pago_form_{proveedor['id']}", clear_on_submit=True):
                monto = st.number_input("Monto del pago", min_value=0, step=1000)
                if st.form_submit_button("Añadir Pago", use_container_width=True):
                    abonos_ref.add({"monto": monto, "fecha": datetime.now()})
                    st.rerun()

            st.divider()
            if st.button("Eliminar Proveedor", key=f"del_prov_{proveedor['id']}", use_container_width=True, type="primary"):
                for abono in abonos:
                    abonos_ref.document(abono['id']).delete()
                proveedores_ref.document(proveedor['id']).delete()
                st.rerun()

# --- PESTAÑAS DE GESTIÓN ---
if selected_tab == "Clientes y Abonos":
    render_management_tab(
        tab_name="Clientes y Abonos",
        collection_name="clientes",
        form_fields=[
            ("Nombre Completo", "text_input", {"key": "name", "placeholder": "Ej: Ana Pérez"})
        ],
        item_renderer=render_cliente
    )

if selected_tab == "Costos y Proveedores":
    render_management_tab(
        tab_name="Costos y Proveedores",
        collection_name="proveedores",
        form_fields=[
            ("Nombre del Proveedor", "text_input", {"key": "nombre", "placeholder": "Ej: Buses Mauricio"}),
            ("Categoría", "selectbox", {"key": "categoria", "options": ["Buses", "Hoteles", "Alimentación", "Entradas/Tickets", "Otro"]}),
            ("Valor Total del Contrato", "number_input", {"key": "valorTotal", "min_value": 0, "step": 1000})
        ],
        item_renderer=render_proveedor
    )

# --- PESTAÑA: ANÁLISIS FINANCIERO ---
if selected_tab == "Análisis Financiero":
    st.header("Análisis Financiero")

    if not st.session_state.excursiones_cache:
        st.warning("Primero debes crear una excursión.")
        st.stop()

    excursion_options = {ex.get('name', f"ID: {ex['id']}"): ex['id'] for ex in st.session_state.excursiones_cache}
    selected_excursion_name = st.selectbox("Selecciona una excursión para analizar:", options=excursion_options.keys())

    if selected_excursion_name:
        excursion_id = excursion_options[selected_excursion_name]
        excursion = next((ex for ex in st.session_state.excursiones_cache if ex["id"] == excursion_id), None)

        clientes_ref = excursiones_ref.document(excursion_id).collection("clientes")
        clientes_docs = clientes_ref.stream()
        clientes = list(clientes_docs)

        proveedores_ref = excursiones_ref.document(excursion_id).collection("proveedores")
        proveedores_docs = proveedores_ref.stream()
        proveedores = [prov.to_dict() for prov in proveedores_docs]

        total_ingresos = 0
        for cliente_doc in clientes:
            abonos_docs = clientes_ref.document(cliente_doc.id).collection("abonos").stream()
            total_ingresos += sum(abono.to_dict().get('monto', 0) for abono in abonos_docs)

        total_costos_pagados = 0
        proveedores_with_ids = [{"id": doc.id, **doc.to_dict()} for doc in proveedores_ref.stream()]
        for prov in proveedores_with_ids:
             abonos_docs = proveedores_ref.document(prov['id']).collection("abonos").stream()
             total_costos_pagados += sum(abono.to_dict().get('monto', 0) for abono in abonos_docs)

        total_costos_contratados = sum(prov.get('valorTotal', 0) for prov in proveedores)

        ganancia_neta = total_ingresos - total_costos_pagados
        ganancia_potencial = (excursion.get('costPerPerson', 0) * len(clientes)) - total_costos_contratados

        kpi1, kpi2, kpi3, kpi4 = st.columns(4)
        kpi1.metric("Ingresos Recaudados", format_currency(total_ingresos))
        kpi2.metric("Costos Pagados", format_currency(total_costos_pagados))
        kpi3.metric("Ganancia Neta (Actual)", format_currency(ganancia_neta))
        kpi4.metric("Ganancia Potencial", format_currency(ganancia_potencial), help="Ganancia si todos los clientes pagan y se pagan todos los costos contratados.")

        st.divider()

        col_chart1, col_chart2 = st.columns(2)
        with col_chart1:
            st.subheader("División de Ganancias")
            ganancia_inversionista = ganancia_neta * 0.20 if ganancia_neta > 0 else 0
            tu_ganancia = ganancia_neta * 0.80 if ganancia_neta > 0 else ganancia_neta

            st.metric("Ganancia Neta Total", format_currency(ganancia_neta))
            st.metric("20% Inversionista (Camilo A.)", format_currency(ganancia_inversionista))
            st.metric("Tu Ganancia (80%)", format_currency(tu_ganancia))

        with col_chart2:
            st.subheader("Visualización Financiera")
            fig = go.Figure(data=[go.Pie(
                labels=['Ingresos Recaudados', 'Costos Pagados', 'Ganancia Neta'],
                values=[max(0, total_ingresos), max(0, total_costos_pagados), max(0, ganancia_neta)],
                hole=.3,
                marker_colors=['#2dd4bf', '#f43f5e', '#0d9488']
            )])
            fig.update_layout(showlegend=True)
            st.plotly_chart(fig, use_container_width=True)

# --- Botón de Logout en la barra lateral ---
if st.sidebar.button("Cerrar Sesión"):
    st.session_state.authenticated = False
    st.rerun()
