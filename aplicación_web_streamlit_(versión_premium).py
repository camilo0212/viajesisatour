# -*- coding: utf-8 -*-
"""Aplicación Web Streamlit (Versión Premium)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A3GO9GlpupEmbzqMS4hU2dz4Dn7sfevt
"""

import streamlit as st
from datetime import datetime
import plotly.graph_objects as go
import config  # Tu archivo de configuración de Firebase

# --- CONFIGURACIÓN DE LA PÁGINA ---
st.set_page_config(
    page_title="Dashboard - Viajes Isatour",
    page_icon="https://i.ibb.co/9v0Zz7N/ISATOUR-400-x-400-px-1.png",
    layout="wide",
)

# --- INICIALIZACIÓN Y AUTENTICACIÓN ---
try:
    db = config.init_firebase()
except Exception as e:
    st.error(f"Error CRÍTICO al inicializar Firebase: {e}")
    st.stop()

# --- ESTADO DE LA SESIÓN ---
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

# --- FUNCIONES AUXILIARES ---
def format_currency(value):
    if isinstance(value, (int, float)):
        return f"${value:,.0f}"
    return "$0"

def parse_date(date_obj):
    if isinstance(date_obj, str):
        try:
            return datetime.fromisoformat(date_obj)
        except (ValueError, TypeError):
            return None
    elif isinstance(date_obj, datetime):
        return date_obj
    return None

# --- VISTA DE LOGIN ---
if not st.session_state.authenticated:
    st.image("https://i.ibb.co/9v0Zz7N/ISATOUR-400-x-400-px-1.png", width=120)
    st.title("Acceso al Dashboard de Isatour")
    st.write("Ingresa tus credenciales para gestionar tus viajes.")
    col1, col2, col3 = st.columns([1,2,1])
    with col2:
        with st.container(border=True):
            user = st.text_input("👤 Usuario")
            password = st.text_input("🔑 Contraseña", type="password")
            if st.button("Iniciar Sesión", use_container_width=True, type="primary"):
                users = st.secrets.get("users", {})
                if user.lower() in users and users.get(user.lower()) == password:
                    st.session_state.authenticated = True
                    st.rerun()
                else:
                    st.error("Usuario o contraseña incorrectos.")
    st.stop()

# --- VISTA PRINCIPAL DE LA APP ---
st.sidebar.image("https://i.ibb.co/9v0Zz7N/ISATOUR-400-x-400-px-1.png", width=80)
st.sidebar.title("Viajes Isatour")
selected_tab = st.sidebar.radio("Navegación", ["Dashboard", "Gestionar Excursiones", "Clientes y Grupos", "Proveedores y Grupos", "Análisis Financiero"])

# --- LÓGICA DE DATOS CON CACHÉ ---
@st.cache_data(ttl=60)
def get_all_data():
    all_data = { "excursiones": [] }
    excursiones_ref = db.collection("excursiones").stream()
    for ex_doc in excursiones_ref:
        ex_data = {"id": ex_doc.id, **ex_doc.to_dict()}

        # Cargar sub-colecciones
        for sub_coll in ['clientes', 'proveedores', 'grupos_clientes', 'grupos_proveedores']:
            docs = ex_doc.reference.collection(sub_coll).stream()
            ex_data[sub_coll] = []
            for doc in docs:
                sub_data = {"id": doc.id, **doc.to_dict()}
                # Cargar abonos si es cliente o proveedor
                if sub_coll in ['clientes', 'proveedores']:
                    abonos_docs = doc.reference.collection("abonos").stream()
                    sub_data["abonos"] = [{"id": a.id, **a.to_dict()} for a in abonos_docs]
                ex_data[sub_coll].append(sub_data)
        all_data["excursiones"].append(ex_data)
    return all_data

try:
    app_data = get_all_data()
    excursiones_cache = app_data.get("excursiones", [])
except Exception as e:
    st.error(f"Error al cargar los datos desde Firestore: {e}")
    excursiones_cache = []

# --- PESTAÑA: DASHBOARD ---
if selected_tab == "Dashboard":
    st.title("📈 Dashboard General")
    st.write(f"Bienvenido de nuevo. Resumen de tu agencia al {datetime.now().strftime('%d/%m/%Y')}.")

    total_excursiones = len(excursiones_cache)
    total_clientes = sum(len(ex.get('clientes', [])) for ex in excursiones_cache)

    total_ingresos = 0
    for ex in excursiones_cache:
        for cliente in ex.get('clientes', []):
            total_ingresos += sum(abono.get('monto', 0) for abono in cliente.get('abonos', []))

    col1, col2, col3 = st.columns(3)
    col1.metric("🌍 Total de Excursiones", f"{total_excursiones}")
    col2.metric("👥 Total de Clientes", f"{total_clientes}")
    col3.metric("💰 Ingresos Totales", format_currency(total_ingresos))

    st.divider()
    st.subheader("Últimas Excursiones Creadas")
    if not excursiones_cache:
        st.info("Aún no has creado ninguna excursión. ¡Ve a 'Gestionar Excursiones' para empezar!")
    else:
        # Ordenar por fecha de creación si está disponible
        try:
            sorted_excursiones = sorted(excursiones_cache, key=lambda x: parse_date(x.get('createdAt', '1970-01-01T00:00:00')), reverse=True)
        except:
            sorted_excursiones = excursiones_cache # Fallback si hay error de fecha

        for ex in sorted_excursiones[:5]: # Mostrar las últimas 5
            fecha_creacion = parse_date(ex.get('createdAt'))
            fecha_str = fecha_creacion.strftime('%d de %B, %Y') if fecha_creacion else "Fecha no disponible"
            with st.container(border=True):
                st.write(f"**{ex.get('name')}** - Creada el {fecha_str}")
                st.write(f"Costo por persona: {format_currency(ex.get('costPerPerson'))}")


# --- OTRAS PESTAÑAS (Adaptadas a la nueva estructura) ---
# (Aquí iría la lógica adaptada para las otras pestañas, usando la estructura de `app_data`
# y las funciones de gestión de grupos, similar a la app de escritorio pero con componentes de Streamlit)
if selected_tab == "Gestionar Excursiones":
    # El código actual para esta pestaña ya es bastante bueno.
    # Se podría refinar la interfaz, pero la funcionalidad es sólida.
    st.header("Gestionar Excursiones")
    # (El código existente para esta pestaña se mantiene aquí)
    # ...

if selected_tab == "Clientes y Grupos":
    st.header("👥 Gestión de Clientes y Grupos")
    st.info("Esta sección ha sido rediseñada para ser compatible con la nueva estructura de datos y grupos por excursión.")
    # (Aquí iría el nuevo código para la gestión de clientes y grupos)
    # ...


# --- Botón de Logout ---
if st.sidebar.button("Cerrar Sesión"):
    st.session_state.authenticated = False
    get_all_data.clear()
    st.rerun()